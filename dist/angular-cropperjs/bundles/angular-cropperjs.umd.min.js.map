{"version":3,"sources":["../../projects/angular-cropperjs/src/lib/angular-cropperjs.service.ts","../projects/angular-cropperjs/src/lib/cropper/cropper.component.html","../projects/angular-cropperjs/src/lib/cropper/cropper.component.ts","../../projects/angular-cropperjs/src/lib/angular-cropperjs.module.ts"],"names":["AngularCropperjsService","factory","ɵfac","providedIn","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵtext","i0.ɵɵadvance","i0.ɵɵtextInterpolate","CropperComponent","this","cropperOptions","export","EventEmitter","ready","isLoading","prototype","ngOnInit","ngOnDestroy","cropper","destroy","imageLoaded","ev","_this","loadError","image","target","imageElement","checkCrossOrigin","crossOrigin","addEventListener","emit","cropbox","setCropBoxData","aspectRatio","NaN","settings","_a","width","height","Object","assign","movable","scalable","zoomable","viewMode","undefined","Cropper","imageLoadError","event","exportCanvas","base64","imageData","getImageData","cropData","getCropBoxData","canvas","getCroppedCanvas","data","Promise","resolve","dataUrl","toDataURL","toBlob","blob","then","res","selectors","viewQuery","rf","ctx","ElementRef","i0.ɵɵtemplate","i0.ɵɵlistener","$event","i0.ɵɵproperty","AngularCropperjsModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularCropperjsService {\n\n  constructor() { }\n}\n","<!-- CROPPER WRAPPER -->\n<div class=\"cropper-wrapper\">\n\n    <!-- LOADING -->\n    <div class=\"loading-block\" *ngIf=\"isLoading\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <!-- LOAD ERROR -->\n    <div class=\"alert alert-warning\" *ngIf=\"loadError\">{{ loadImageErrorText }}</div>\n\n    <!-- CROPPER -->\n    <div class=\"cropper\">\n        <img #image alt=\"image\" [src]=\"imageUrl\" (load)=\"imageLoaded($event)\" (error)=\"imageLoadError($event)\" />\n    </div>\n</div>\n","import { Component, OnInit, OnDestroy, ViewEncapsulation, ElementRef, ViewChild, Input, EventEmitter, Output } from '@angular/core';\nimport Cropper from 'cropperjs';\n\nexport interface ImageCropperSetting {\n    width: number;\n    height: number;\n}\n\nexport interface ImageCropperResult {\n    imageData: Cropper.ImageData;\n    cropData: Cropper.CropBoxData;\n    blob?: Blob;\n    dataUrl?: string;\n}\n\n@Component({\n    selector: 'angular-cropper',\n    templateUrl: './cropper.component.html',\n    styleUrls: ['./cropper.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class CropperComponent implements OnInit, OnDestroy {\n\n    @ViewChild('image', { read: ElementRef, static: true }) image: ElementRef;\n\n    @Input() imageUrl: any;\n    @Input() settings: ImageCropperSetting;\n    @Input() cropbox: Cropper.CropBoxData;\n    @Input() loadImageErrorText: string;\n    @Input() cropperOptions: any = {};\n\n    @Output() export = new EventEmitter<ImageCropperResult>();\n    @Output() ready = new EventEmitter();\n\n    public isLoading: boolean = true;\n    public cropper: Cropper;\n    public imageElement: HTMLImageElement;\n    public loadError: any;\n\n    constructor() { }\n\n    public ngOnInit(): void {}\n\n    public ngOnDestroy(): void {\n      if(this.cropper) {\n        this.cropper.destroy();\n        this.cropper = null;\n      }\n    }\n\n    /**\n     * Image loaded\n     * @param ev\n     */\n    public imageLoaded(ev: Event): void {\n\n        //\n        // Unset load error state\n        this.loadError = false;\n\n        //\n        // Setup image element\n        const image = ev.target as HTMLImageElement;\n        this.imageElement = image;\n\n        //\n        // Add crossOrigin?\n        if (this.cropperOptions.checkCrossOrigin) {\n            image.crossOrigin = 'anonymous';\n        }\n\n        //\n        // Image on ready event\n        image.addEventListener('ready', () => {\n            //\n            // Emit ready\n            this.ready.emit(true);\n\n            //\n            // Unset loading state\n            this.isLoading = false;\n\n            //\n            // Validate cropbox existance\n            if (this.cropbox) {\n\n                //\n                // Set cropbox data\n                this.cropper.setCropBoxData(this.cropbox);\n            }\n        });\n\n        //\n        // Setup aspect ratio according to settings\n        let aspectRatio = NaN;\n        if (this.settings) {\n            const { width, height } = this.settings;\n            aspectRatio = width / height;\n        }\n\n        //\n        // Set crop options\n        // extend default with custom config\n        this.cropperOptions = Object.assign({\n            aspectRatio,\n            movable: false,\n            scalable: false,\n            zoomable: false,\n            viewMode: 1,\n            checkCrossOrigin: true\n        }, this.cropperOptions);\n\n        //\n        // Set cropperjs\n        if (this.cropper) {\n            this.cropper.destroy();\n            this.cropper = undefined;\n        }\n        this.cropper = new Cropper(image, this.cropperOptions);\n    }\n\n    /**\n     * Image load error\n     * @param event\n     */\n    public imageLoadError(event: any): void {\n\n        //\n        // Set load error state\n        this.loadError = true;\n\n        //\n        // Unset loading state\n        this.isLoading = false;\n    }\n\n    /**\n     * Export canvas\n     * @param base64\n     */\n    public exportCanvas(base64?: any): void {\n\n        //\n        // Get and set image, crop and canvas data\n        const imageData = this.cropper.getImageData();\n        const cropData = this.cropper.getCropBoxData();\n        const canvas = this.cropper.getCroppedCanvas();\n        const data = { imageData, cropData };\n\n        //\n        // Create promise to resolve canvas data\n        const promise = new Promise(resolve => {\n\n            //\n            // Validate base64\n            if (base64) {\n\n                //\n                // Resolve promise with dataUrl\n                return resolve({\n                    dataUrl: canvas.toDataURL('image/png')\n                });\n            }\n            canvas.toBlob(blob => resolve({ blob }));\n        });\n\n        //\n        // Emit export data when promise is ready\n        promise.then(res => {\n            this.export.emit(Object.assign(data, res));\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CropperComponent } from './cropper/cropper.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [CropperComponent],\n    exports: [CropperComponent]\n})\nexport class AngularCropperjsModule { }\n"]}